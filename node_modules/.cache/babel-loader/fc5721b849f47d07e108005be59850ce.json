{"ast":null,"code":"import { CHARACTERS_GET_ALL, CHARACTER_ADD_FAVORITES } from '../actions/characters.actions';\nconst initialState = {\n  characters: [],\n  favorites: []\n};\n\nconst charactersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CHARACTERS_GET_ALL:\n      {\n        return { ...state,\n          characters: action.data\n        };\n      }\n\n    case CHARACTER_ADD_FAVORITES:\n      {\n        if (state.favorites.includes(action.id)) {\n          let newFavorites = state.favorites;\n          return { ...state,\n            favorites: newFavorites.filter(fav => fav !== action.id)\n          };\n        } else {\n          return { ...state,\n            favorites: [...state.favorites, action.id]\n          };\n        }\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default charactersReducer;","map":{"version":3,"sources":["C:/Users/PC/Documents/Sirius/Rick And Morty/rickandmorty4/rickandmortygql/src/redux/reducers/characters.reducer.js"],"names":["CHARACTERS_GET_ALL","CHARACTER_ADD_FAVORITES","initialState","characters","favorites","charactersReducer","state","action","type","data","includes","id","newFavorites","filter","fav"],"mappings":"AAAA,SACIA,kBADJ,EAEIC,uBAFJ,QAGO,+BAHP;AAKA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,SAAS,EAAE;AAFM,CAArB;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKR,kBAAL;AAAyB;AACrB,eAAO,EACH,GAAGM,KADA;AAEHH,UAAAA,UAAU,EAAEI,MAAM,CAACE;AAFhB,SAAP;AAIH;;AACD,SAAKR,uBAAL;AAA8B;AAC1B,YAAGK,KAAK,CAACF,SAAN,CAAgBM,QAAhB,CAAyBH,MAAM,CAACI,EAAhC,CAAH,EAAuC;AACnC,cAAIC,YAAY,GAAGN,KAAK,CAACF,SAAzB;AACA,iBAAO,EACH,GAAGE,KADA;AACOF,YAAAA,SAAS,EAAEQ,YAAY,CAACC,MAAb,CAAoBC,GAAG,IAAIA,GAAG,KAAKP,MAAM,CAACI,EAA1C;AADlB,WAAP;AAGH,SALD,MAKO;AACH,iBAAO,EACH,GAAGL,KADA;AACOF,YAAAA,SAAS,EAAE,CAAC,GAAGE,KAAK,CAACF,SAAV,EAAqBG,MAAM,CAACI,EAA5B;AADlB,WAAP;AAGH;AACJ;;AACD;AACI,aAAOL,KAAP;AArBR;AAuBH,CAxBD;;AA0BA,eAAeD,iBAAf","sourcesContent":["import {\r\n    CHARACTERS_GET_ALL,\r\n    CHARACTER_ADD_FAVORITES\r\n} from '../actions/characters.actions'\r\n\r\nconst initialState = {\r\n    characters: [],\r\n    favorites: []\r\n}\r\n\r\nconst charactersReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n\r\n        case CHARACTERS_GET_ALL: {\r\n            return {\r\n                ...state,\r\n                characters: action.data\r\n            }\r\n        }\r\n        case CHARACTER_ADD_FAVORITES: {\r\n            if(state.favorites.includes(action.id)){\r\n                let newFavorites = state.favorites\r\n                return {\r\n                    ...state, favorites: newFavorites.filter(fav => fav !== action.id)\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state, favorites: [...state.favorites, action.id]\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default charactersReducer;"]},"metadata":{},"sourceType":"module"}